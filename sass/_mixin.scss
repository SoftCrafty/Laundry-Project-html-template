/*----------------------------------------*/
/*  02. MIXIN DECLARATION
/*----------------------------------------*/
@use "sass:math"; // Required for math.div()

/* Flex & Transform Mixins */
@mixin flex($direction, $justify, $align) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin transition($time) {
  transition: all $time ease;
}

@mixin border-style($width, $height, $color) {
  width: $width;
  height: $height;
  background-color: $color;
  
}

@mixin background_img($repeat, $position){
  background-repeat: $repeat;
  background-position: $position;
}

@mixin border-radius($radius) {
  border-radius: $radius;
}

@mixin transformY($translate){
  transform: translateY($translate);
}

@mixin transformX($translate){
  transform: translateX($translate);
}

@mixin transform($translateX, $translateY){
  transform: translate($translateX, $translateY);
}

/* Flexbox Fallback Mixin */
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/* Responsive Mixins */
@mixin xxs {
  @media only screen and (max-width: 479px) {
    @content;
  }
}
@mixin xs {
  @media only screen and (max-width: 576px) {
    @content;
  }
}
@mixin sm {
  @media only screen and (min-width: 0px) and (max-width: 767px) {
    @content;
  }
}
@mixin md {
  @media only screen and (min-width: 768px) and (max-width: 991px) {
    @content;
  }
}
@mixin lg {
  @media only screen and (min-width: 992px) and (max-width: 1199px) {
    @content;
  }
}
@mixin xl {
  @media only screen and (min-width: 1200px) and (max-width: 1399px) {
    @content;
  }
}
@mixin nesthub {
  @media only screen and (min-width: 992px) and (max-width: 1024px) {
    @content;
  }
}
@mixin nesthubmax {
  @media only screen and (min-width: 1025px) and (max-width: 1280px) {
    @content;
  }
}

@mixin three13 {
  @media only screen and (min-width: 0px) and (max-width: 1310px) {
    @content;
  }
}
@mixin tow12min {
  @media only screen and (min-width: 1200px) {
    @content;
  }
}
@mixin tow12 {
  @media only screen and (min-width: 0px) and (max-width: 1200px) {
    @content;
  }
}
@mixin navbtn {
  @media only screen and (min-width: 0px) and (max-width: 1000px) {
    @content;
  }
}
@mixin navmenu {
  @media only screen and (min-width: 0px) and (max-width: 998px) {
    @content;
  }
}

/* Utility Margin & Padding Classes with Responsive Adjustments */
@for $i from 1 through 300 {
  .mt-#{$i} { margin-top: #{$i}px; }
  .mb-#{$i} { margin-bottom: #{$i}px; }
  .ml-#{$i} { margin-left: #{$i}px; }
  .mr-#{$i} { margin-right: #{$i}px; }
  .pt-#{$i} { padding-top: #{$i}px; }
  .pb-#{$i} { padding-bottom: #{$i}px; }
  .pl-#{$i} { padding-left: #{$i}px; }
  .pr-#{$i} { padding-right: #{$i}px; }

  @media (max-width: 768px) {
    .mt-#{$i} { margin-top: #{math.div($i, 2)}px !important; }
    .mb-#{$i} { margin-bottom: #{math.div($i, 2)}px !important; }
    .ml-#{$i} { margin-left: #{math.div($i, 2)}px !important; }
    .mr-#{$i} { margin-right: #{math.div($i, 2)}px !important; }
    .pt-#{$i} { padding-top: #{math.div($i, 2)}px !important; }
    .pb-#{$i} { padding-bottom: #{math.div($i, 2)}px !important; }
    .pl-#{$i} { padding-left: #{math.div($i, 2)}px !important; }
    .pr-#{$i} { padding-right: #{math.div($i, 2)}px !important; }
  }

  @media (max-width: 1024px) {
    .mt-#{$i} { margin-top: #{math.div($i, 1.2)}px; }
    .mb-#{$i} { margin-bottom: #{math.div($i, 1.2)}px; }
    .ml-#{$i} { margin-left: #{math.div($i, 1.2)}px; }
    .mr-#{$i} { margin-right: #{math.div($i, 1.2)}px; }
    .pt-#{$i} { padding-top: #{math.div($i, 1.2)}px; }
    .pb-#{$i} { padding-bottom: #{math.div($i, 1.2)}px; }
    .pl-#{$i} { padding-left: #{math.div($i, 1.2)}px; }
    .pr-#{$i} { padding-right: #{math.div($i, 1.2)}px; }
  }
}

/* Smart Breakpoint Mixin */
@mixin breakpoint($point) {
  @if $point == xm {
    @media (min-width: 320px) { @content; }
  } @else if $point == max-xm {
    @media (max-width: 320px) { @content; }
  } @else if $point == xxxsmall {
    @media (min-width: 375px) { @content; }
  } @else if $point == max-xxxsmall {
    @media (max-width: 375px) { @content; }
  } @else if $point == xxsmall {
    @media (min-width: 450px) { @content; }
  } @else if $point == max-xxsmall {
    @media (max-width: 450px) { @content; }
  } @else if $point == xxs {
    @media (min-width: 470px) { @content; }
  } @else if $point == max-xxs {
    @media (max-width: 470px) { @content; }
  } @else if $point == xs {
    @media (min-width: 500px) { @content; }
  } @else if $point == max-xs {
    @media (max-width: 500px) { @content; }
  } @else if $point == sm {
    @media (min-width: 576px) { @content; }
  } @else if $point == max-sm {
    @media (max-width: 575px) { @content; }
  } @else if $point == md {
    @media (min-width: 768px) { @content; }
  } @else if $point == max-md {
    @media (max-width: 767px) { @content; }
  } @else if $point == lg {
    @media (min-width: 992px) { @content; }
  } @else if $point == max-lg {
    @media (max-width: 991px) { @content; }
  } @else if $point == xl {
    @media (min-width: 1200px) { @content; }
  } @else if $point == max-xl {
    @media (max-width: 1199px) { @content; }
  } @else if $point == xxl {
    @media (min-width: 1400px) { @content; }
  } @else if $point == max-xxl {
    @media (max-width: 1399px) { @content; }
  } @else if $point == xxxl {
    @media (min-width: 1600px) { @content; }
  } @else if $point == max-xxxl {
    @media (max-width: 1600px) { @content; }
  } @else if $point == xl4 {
    @media (min-width: 1899px) { @content; }
  } @else if $point == max-xl4 {
    @media (max-width: 1899px) { @content; }
  } @else if $point == xl5 {
    @media (min-width: 4000px) { @content; }
  } @else if $point == max-xl5 {
    @media (max-width: 4000px) { @content; }
  }
}
